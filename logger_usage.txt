./src/main/java/io/joshuasalcedo/homelab/devshell/utils/AliasSetter.java:3:import io.joshuasalcedo.commonlibs.logging.api.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/utils/AliasSetter.java:44:            Logger.error("Cannot Find the JAR file: " + e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:3:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:4:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:25:    private static final Logger logger = LoggerFactory.getLogger(SystemCommands.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:38:            logger.error("Error getting current directory", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:87:            logger.error("Error changing directory", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/SystemCommands.java:152:            logger.error("Error listing directory", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:11:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:12:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:35:    private static final Logger logger = LoggerFactory.getLogger(GitCommands.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:74:                logger.warn("Could not validate author: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:77:            logger.info("Executing smart commit with message: '{}'", message);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:130:            logger.error("Unexpected error during smart commit", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:133:            logger.error("Unexpected error during smart commit", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:149:            logger.debug("Checking status for repository at: {}", repository.getRootPath());
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:191:            logger.error("Error getting repository status", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:211:            logger.error("Error initializing repository", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:248:            logger.error("Error getting commit history", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:309:            logger.error("Error validating repository", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:344:            logger.error("Failed to configure git", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:433:            logger.error("Failed to configure git authentication", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:465:                        logger.warn("File {} is not untracked, skipping", file);
./src/main/java/io/joshuasalcedo/homelab/devshell/presentation/shell/GitCommands.java:498:            logger.error("Error adding files", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:6:import io.joshuasalcedo.commonlibs.logging.api.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:59:                Logger.info("Created new commands file at: {}", filePath);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:62:            Logger.error("Failed to initialize commands file at {}: {}", filePath, e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:124:            Logger.info("Saved command: {}", command.getCommandName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:141:                Logger.info("Deleted command: {}", interactiveCommand.getCommandName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:143:                Logger.warn("Command not found for deletion: {}", interactiveCommand.getCommandName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:156:            Logger.warn("Commands file not found, returning empty list");
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:159:            Logger.error("Error reading commands file: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:162:            Logger.error("Error parsing commands JSON: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:172:            Logger.error("Error writing commands to file: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:193:                Logger.info("Deleted command by name: {}", commandName);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/command/FileInteractiveCommandRepositoryAdapter.java:219:            Logger.info("Deleted all commands");
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:18:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:19:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:41:    private static final Logger logger = LoggerFactory.getLogger(JGitRepositoryAdapter.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:48:                logger.debug("No .git directory found at: {}", repositoryPath);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:71:            logger.debug("Error checking repository at {}: {}", repositoryPath, e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:103:                        logger.warn("Interrupted while configuring git user: {}", ie.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:122:            logger.info("Initialized git repository at: {}", repositoryPath);
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:127:            logger.error("Failed to initialize repository at {}: {}", repositoryPath, e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:147:            logger.debug("Git Status - Added: {}, Changed: {}, Removed: {}, Modified: {}, Missing: {}, Untracked: {}", 
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:154:            logger.error("Failed to get working directory status: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:168:            logger.error("Failed to get current branch: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:189:            logger.error("Failed to get branches: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:205:            logger.error("Failed to create branch {}: {}", branchName, e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:217:            logger.debug("Switched to branch: {}", branch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:220:            logger.error("Failed to switch to branch {}: {}", branch.getName(), e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:233:            logger.debug("Deleted branch: {}", branch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:236:            logger.error("Failed to delete branch {}: {}", branch.getName(), e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:255:            logger.debug("Staged all tracked files");
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:258:            logger.error("Failed to stage tracked files: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:270:            logger.debug("Staged {} files", files.size());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:273:            logger.error("Failed to stage files: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:311:            logger.error("Failed to create commit: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:329:            logger.debug("Merged branch {} into {}", sourceBranch.getName(), targetBranch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:332:            logger.error("Failed to merge branch {} into {}: {}", 
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:347:                logger.error("Branch {} does not exist locally", branch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:358:            logger.debug("Pushed branch {} to origin", branch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:362:                logger.error("Push failed due to authentication: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:367:                logger.error("Push failed due to transport error: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:371:            logger.error("Failed to push branch {}: {}", branch.getName(), e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:406:            logger.error("Failed to get commit history: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:427:            logger.warn("Failed to get configured author: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:443:            logger.error("Failed to get remotes: {}", e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/infrastructure/git/JGitRepositoryAdapter.java:470:            logger.debug("Failed to get remotes for {}: {}", repositoryPath, e.getMessage());
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/InteractiveCommandConfiguration.java:4:import io.joshuasalcedo.commonlibs.logging.api.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:5:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:6:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:29:    private static final Logger logger = LoggerFactory.getLogger(CommandNotFoundMessageProviderImpl.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:91:                logger.debug("Command failed with TTY error: {}", text);
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:106:            logger.debug("Command not found: {}", text, e);
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:118:            logger.debug("Failed to execute system command: {}", text, e);
./src/main/java/io/joshuasalcedo/homelab/devshell/configuration/CommandNotFoundMessageProviderImpl.java:155:            logger.debug("Failed to execute interactive command: {}", command, e);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:3:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:4:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:26:  private final Logger logger = LoggerFactory.getLogger(this.getClass());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:66:      logger.error(formattedMessage, cause);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:68:      logger.error(formattedMessage);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/exception/BaseException.java:73:      logger.error("Error details: {}", errorDetails);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/InteractiveCommandService.java:7:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/InteractiveCommandService.java:8:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:6:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:7:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:21:    private static final Logger logger = LoggerFactory.getLogger(GitValidationService.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:34:            logger.error("Repository path does not exist: {}", repository.getRootPath());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:40:            logger.error("Repository path is not a directory: {}", repository.getRootPath());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:46:            logger.error("Repository is not initialized: {}", repository.getRootPath());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:53:            logger.error("Git directory not found: {}", gitDir);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:57:        logger.debug("Repository validation passed for: {}", repository.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:76:            logger.error("User '{}' is not authorized to commit", author.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:80:        logger.debug("Author validation passed for: {}", author.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:95:            logger.error("No remote repository configured for: {}", remoteName);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:99:        logger.debug("Remote repository validation passed for: {}", remoteName);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/GitValidationService.java:118:        logger.debug("Commit message validation passed");
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:8:import org.slf4j.Logger;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:9:import org.slf4j.LoggerFactory;
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:21:    private static final Logger logger = LoggerFactory.getLogger(SmartCommitService.class);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:42:        logger.info("Starting smart commit workflow for repository: {}", repository.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:66:        logger.info("Created temporary branch: {}", tempBranchName);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:79:                logger.info("Staged {} untracked files", currentWorkingDir.getUntrackedFiles().size());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:93:            logger.info("Created commit on temporary branch: {}", commit.getHash());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:100:            logger.info("Merged temporary branch into: {}", currentBranch.getName());
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:104:            logger.info("Deleted temporary branch: {}", tempBranchName);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:106:            logger.info("Smart commit workflow completed successfully");
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:110:            logger.error("Smart commit workflow failed, attempting cleanup", e);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:117:                logger.warn("Cleanup failed after smart commit error", cleanupException);
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:134:                logger.info("Pushed changes to remote repository");
./src/main/java/io/joshuasalcedo/homelab/devshell/domain/service/SmartCommitService.java:136:                logger.warn("Failed to push to remote repository", e);
